快速排序：
堆排序:
Heap.java
public class Heap<E extends Comparable<E>>{
  private java.util.ArrayList<E> list = new java.util.ArrayList<>();
  public Heap(){
  }
  
  public void add(E new Object){
    list.add(newObject);
    int currentIndex = list.size() - 1;
    while(currentIndex > 0){
      int parentIndex = (currrentIndex - 1) / 2; 
      if(list.get(currentIndex).compareTo(list.get(parentIndex)) > 0){
        E temp = list.get(currentIndex);
        list.set(currentIndex, list.get(parentIndex));
        list.set(parentIndex. temp);
      }
      else {
        break;
      }
      currentIndex = parentIndex;
    }
  }
  
  public E remove(){
    if(list.size() == 0) return null;
    E removedObject = list.get(0);
    list.set(0, list.get(list.size() - 1));
    list.remove(list.size() - 1);
    int currentIndex = 0;
    while(currentIndex < list.size()){
      int leftChildIndex =  2 * currentIndex + 1;
      int rightChildIndex = 2 * currentIndex + 2;
      if(leftChildIndex >= list.size()) break;
      int maxIndex = leftChildIndex;
      if(rightChildIndex < list.size()){
        if(list.get(maxIndex).compareTo(list.get(rightChildIndex)) < 0){
          maxIndex = rightChildIndex;
        }
      }
      if(list.get(currentIndex).compareTo(list.get(maxIndex)) < 0){
        E temp = list.get(maxIndex);
        list.set(maxIndex, list.get(currentIndex));
        list.set(currentIndex, temp);
        currentIndex = maxIndex;
      } else {
        break;
      }
    }
    return removedObject;
  }
  
  public int getSize(){
    return list.size();
  }
}


public class HeapSort{
  public static <E extends Comparable<E>> void heapSort(E[] list){
    Heap<E> heap = new Heap<>();
    for (int i = 0; i < list.length; i++){
      heap.add(list[i]);
    }
    for(int i = list.length -1; i >=0; i--){
      list[i] = heap.remove();
    }
  
  }
}
O(nlogn)




桶排序:
void bucketSort(E[] list){
  E[] bucket = (E[])new java.util.ArrayList[t + 1];
  for (int i = 0; i < list.length; i++){
    int key = list[i].getKey();
    if(bucket[key] == null)
      bucket[key] = new java.util.ArrayList<>();
    bucket[key].add(list[i]);
  }
  int k = 0;
  for (int i = 0; i < bucket.length; i++){
    if(bucket[i] != null){
      for(int i = 0; j < bucket[i].size(); j++){
        list[k++] = bucket[i].get(j);
      }
    }
  }
}
O(n + t)



基数排序：
分别对数的最后一位到第一位使用桶排序；O(dn)

外部排序：
大写的归并排序，O(nlog(n))


快速排序：
public class QuickSort{
  public static void quickSort(int[] list){
    quickSort(list, 0, list.length - 1);
  }
  
  public static void quickSort(int[] list, int first, int last){
    if(last > first){
      int pivotIndex = partition(list, first, last);
      quickSort(list, first, pivotIndex - 1);
    }
  }
  
  public static int partition(int[] list, int first, int last){
    int pivot = list[first];
    int low = first + 1;
    int high = last;
    while(high > low){
      while(low <= high)
    }
  }
}
